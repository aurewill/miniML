(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = 
  sig
    (* the type of environments *)
    type env
    (* the type of values stored in environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value = Closure (exp, env)

    let lookup (env : env) (varname : varid) : value =
      try
        (let (_, val_ref) = 
          List.find (fun (id, _) -> if id = varname then true else false) env
        in !val_ref)
      with Not_found -> raise (EvalError "Variable not in environment")

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      try
        (let _ = lookup env varname in 
         List.map (fun (id, val_ref) -> if id = varname then (id, loc) 
                                        else (id, val_ref)) env)
      with EvalError "Variable not in environment" -> (varname, loc) :: env

    let env_to_string (env : env) : string =
      "{" ^
      (let rec print_env (env' : env) =
        match env' with
        | [] -> "}"
        | (varname, val_ref) :: t -> varname ^ " |--> " ^ 
          (match !val_ref with
          | Val (exp_v) -> 
            (match t with
            | [] -> (exp_to_concrete_string exp_v ^ print_env t)
            | _ -> (exp_to_concrete_string exp_v ^ "; " ^ print_env t))
          | Closure (exp_c, env'') -> 
            (match t with
            | [] -> ("[{" ^ print_env env'' ^ " |-- " ^ 
                     exp_to_concrete_string exp_c ^ "]" ^ print_env t)
            | _ -> ("[{" ^ print_env env'' ^ " |-- " ^ 
                    exp_to_concrete_string exp_c ^ "]" ^ "; " ^ print_env t)))
      in print_env env)
      
    let value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val (exp) -> exp_to_concrete_string exp
      | Closure (exp, env) -> 
        if printenvp = false then exp_to_concrete_string exp
        else "[" ^ env_to_string env ^ " |-- " ^ 
             exp_to_concrete_string exp ^ "]"
  end ;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The COMMON EVALUATOR -- used to abstract away the commonalities between
   evaluating under different semantics *)

let eval_comm (evaluator : expr -> Env.env -> Env.value) 
                  (exp : expr) 
                  (env : Env.env) 
                  : Env.value =
  match exp with
  | Unop (_, e) -> 
    (match evaluator e env with
    | Env.Val (Num n) -> Env.Val (Num ~-n)
    | Env.Val (Float n) -> Env.Val (Float ~-.n)
    | _ -> raise (EvalError "Negation not supported for this expr"))
  | Binop (op, e1, e2) -> 
    (match evaluator e1 env, evaluator e2 env with
    | Env.Val (Num n1), Env.Val (Num n2) ->
      (match op with
      | Plus -> Env.Val (Num (n1 + n2))
      | Minus -> Env.Val (Num (n1 - n2))
      | Times -> Env.Val (Num (n1 * n2))
      | Equals -> Env.Val (Bool (n1 = n2))
      | LessThan -> Env.Val (Bool (n1 < n2))
      | _ -> raise (EvalError "Invalid operator on ints"))
    | Env.Val (Float n1), Env.Val (Float n2) ->
      (match op with
      | FPlus -> Env.Val (Float (n1 +. n2))
      | FMinus -> Env.Val (Float (n1 -. n2))
      | FTimes -> Env.Val (Float (n1 *. n2))
      | Equals -> Env.Val (Bool (n1 = n2))
      | LessThan -> Env.Val (Bool (n1 < n2))
      | _ -> raise (EvalError "Invalid operator on floats"))
    | Env.Val (Bool b1), Env.Val (Bool b2) ->
      (match op with
      | Equals -> Env.Val (Bool (b1 = b2))
      | LessThan -> Env.Val (Bool (b1 < b2))
      | _ -> raise (EvalError "Invalid operator on booleans"))
    | _ -> raise (EvalError "Invalid operands for this operator"))
  | Conditional (e1, e2, e3) ->
    (match evaluator e1 env with
    | Env.Val (Bool true) -> evaluator e2 env
    | Env.Val (Bool false) -> evaluator e3 env
    | _ -> raise (EvalError "Condition must eval to bool"))
  | _ -> raise (EvalError "Debug: Case should never match") ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
   
let rec eval_s (exp : expr) (_env : Env.env) : Env.value =
  let empty = Env.empty () in
  match exp with
  | Var _ -> raise (EvalError "Unbound variable")
  | Num _ 
  | Float _
  | Bool _ -> Env.Val exp
  | Unop _ -> eval_comm eval_s exp empty
  | Binop _ -> eval_comm eval_s exp empty
  | Conditional _ -> eval_comm eval_s exp empty
  | Fun _ -> Env.Val exp
  | Let (x, e1, e2) -> 
    (match eval_s e1 empty with
    | Env.Val v_d -> eval_s (subst x v_d e2) empty
    | _ -> raise (EvalError "No closures in subst semantics"))
  | Letrec (f, e1, e2) -> 
    (match eval_s e1 empty with
    | Env.Val v_d -> 
      let v_d_subst = subst f (Letrec (f, v_d, Var f)) v_d in
      eval_s (subst f v_d_subst e2) empty
    | _ -> raise (EvalError "No closures in subst semantics"))
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError "Unassigned")
  | App (e1, e2) -> 
    (match eval_s e1 empty with
    | Env.Val (Fun (x, e)) ->
      (match eval_s e2 empty with
      | Env.Val v_q -> eval_s (subst x v_q e) empty
      | _ -> raise (EvalError "No closures in subst semantics"))
    | _ -> raise (EvalError "Must eval to Fun as first expr of App")) ;;
     
(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
   
let rec eval_d (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Var (x) -> Env.lookup env x
  | Num _ 
  | Float _
  | Bool _ -> Env.Val exp
  | Unop _ -> eval_comm eval_d exp env
  | Binop _ -> eval_comm eval_d exp env
  | Conditional _ -> eval_comm eval_d exp env
  | Fun _ -> Env.Val exp
  | Let (id, def, body) -> 
    (match eval_d def env with
    | Env.Closure (_) -> 
      raise (EvalError "Implementation does not return closures after eval")
    | v_d -> let env' = Env.extend env id (ref (v_d)) in eval_d body env')
  | Letrec (id, def, body) -> 
    (match eval_d def env with
    | Env.Closure (_) ->
      raise (EvalError "Implementation does not return closures after eval")
    | v_d -> let env' = Env.extend env id (ref (v_d)) in eval_d body env')
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError "Unassigned")
  | App (func, arg) ->
    (match eval_d func env with
    | Env.Val (Fun (id, e)) -> 
      (let v_q = eval_d arg env in
       let env' = Env.extend env id (ref v_q) in
       eval_d e env')
    | Env.Closure (_) -> 
      raise (EvalError "Implementation does not return closures after eval")
    | _ -> raise (EvalError "Must eval to Fun as first expr of App")) ;;
       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let rec eval_l (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Var (x) -> Env.lookup env x
  | Num _ 
  | Float _
  | Bool _ -> Env.Val exp
  | Unop _ -> eval_comm eval_l exp env
  | Binop _ -> eval_comm eval_l exp env
  | Conditional _ -> eval_comm eval_l exp env
  | Fun _ -> Env.Closure (exp, env)
  | Let (id, def, body) -> 
    (match eval_l def env with
    | v_d -> let env' = Env.extend env id (ref (v_d)) in eval_l body env')
  | Letrec (id, def, body) -> 
    let rec_ref = ref (Env.Val Unassigned) in
    let env' = Env.extend env id rec_ref in
    (match eval_l def env' with
    | v_d -> rec_ref := v_d; eval_l body env')
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError "Unassigned")
  | App (func, arg) ->
    (match eval_l func env with
    | Env.Closure (Fun (id, e), env_l) -> 
      let v_q = eval_l arg env in
      let env_l' = Env.extend env_l id (ref v_q) in
      eval_l e env_l'
    | _ -> raise (EvalError "Fun of App must eval to closure")) ;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_l ;;
