(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
open CS51Utils ;;
open Absbook ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
    (* the type of values stored in environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value = Closure (exp, env)

    let lookup (env : env) (varname : varid) : value =
      try
        (let (_, val_ref) = List.find (fun (var_name, _) -> if var_name = varname then true else false) env
        in !val_ref)
      with Not_found -> raise (EvalError "Variable not in environment")

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      try
        (let _ = lookup env varname in List.map (fun (x, y) -> if x = varname then (x, loc) else (x, y)) env)
      with EvalError "Variable not in environment" -> (varname, loc) :: env
      

    let env_to_string (env : env) : string =
      "{" ^
      (let rec print_env (env' : env) =
        match env' with
        | [] -> "}"
        | (varname, val_ref) :: t -> varname ^ " |--> " ^ 
          (match !val_ref with
          | Val (exp_v) -> 
            (match t with
            | [] -> (exp_to_concrete_string exp_v ^ print_env t)
            | _ -> (exp_to_concrete_string exp_v ^ "; " ^ print_env t))
          | Closure (exp_c, env'') -> 
            (match t with
            | [] -> ("[{" ^ print_env env'' ^ " |-- " ^ exp_to_concrete_string exp_c ^ "]" ^ print_env t)
            | _ -> ("[{" ^ print_env env'' ^ " |-- " ^ exp_to_concrete_string exp_c ^ "]" ^ "; " ^ print_env t)))
      in print_env env)

    (* Is this function meant to be used in env_to_string? 
      (I think I moved this below env_to_string so I could use env_to_string in this function) *)
    let value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val (exp) -> exp_to_concrete_string exp
      | Closure (exp, env) -> 
        if printenvp = false then exp_to_concrete_string exp
        else "[" ^ env_to_string env ^ " |-- " ^ exp_to_concrete_string exp ^ "]"

  end
;;

(* let env_mod_test () =
  let x_ref = ref (Env.Val (Num (2))) in
  let env1 = Env.extend (Env.empty ()) "x" x_ref in
  unit_test (Env.env_to_string env1 = "{x |--> 2}") "Env where x equals 2:";
  print_string (Env.env_to_string env1);
  print_newline ();
  x_ref := Env.Val (Binop (Plus, Var ("y"), Num (2)));
  let env2 = Env.extend env1 "x" x_ref in
  unit_test (Env.env_to_string env2 = "{x |--> y + 2}") "Env where x equals y + 2:";
  print_string (Env.env_to_string env2);
  print_newline ();
  let y_ref = ref (Env.Val (Fun ("x", Binop (Plus, Var ("x"), Num (2))))) in
  let env3 = Env.extend env2 "y" y_ref in
  unit_test (Env.env_to_string env3 = "{y |--> fun x = x + 2; x |--> y + 2}") "Env with x and y mapped:";
  print_string (Env.env_to_string env3);
  print_newline ();
  let y_ref = ref (Env.Val (Num (2))) in
  let env4 = Env.extend env3 "y" y_ref in
  unit_test (Env.env_to_string env4 = "{y |--> 2; x |--> y + 2}") "Env where y = 2, x equals y + 2:";
  print_string (Env.env_to_string env4);
  print_newline ();
  let fun1 = Fun ("z", Binop (Plus, Var ("z"), Var ("x"))) in
  let closure1_ref = ref (Env.Closure (fun1, env4)) in
  let env5 = Env.extend env4 "f" closure1_ref in
  unit_test (Env.env_to_string env5 = 
  "{f |--> [{y |--> 2; x |--> y + 2} |-- fun z = z + x]; y |--> 2; x |--> y + 2}") "Env with closure";
  print_string (Env.env_to_string env5);
  print_newline ()
;;

env_mod_test () ;; *)


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
let rec eval_s (exp : expr) (_env : Env.env) : Env.value =
  match exp with
  | Bool (_)
  | Num (_)
  | Var (_)
  | Fun (_, _) -> Env.Val exp
  | Unop (_, exp1) -> eval_s (Binop(Minus, Num(0), exp1)) (Env.empty ())
  | Binop (op, exp1, exp2) -> 
    (match eval_s exp1 (Env.empty ()), eval_s exp2 (Env.empty ()) with
    | Env.Closure (_), _
    | _, Env.Closure (_) -> raise (EvalError "Closures should never show up in subst semantics evals")
    | Env.Val expA, Env.Val expB ->
      (match expA, expB with
      | Bool (b1), Bool (b2) ->
        (match op with
        | Equals -> if b1 = b2 then Env.Val (Bool (true)) else Env.Val (Bool (false))
        | _ -> raise (EvalError "Booleans can't be evaluated with this operator"))
      | Num (num1), Num (num2) ->
        (match op with
        | Plus -> Env.Val (Num (num1 + num2))
        | Minus -> Env.Val (Num (num1 - num2))
        | Times -> Env.Val (Num (num1 * num2))
        | Equals -> if num1 = num2 then Env.Val (Bool (true)) else Env.Val (Bool (false))
        | LessThan -> if num1 < num2 then Env.Val (Bool (true)) else Env.Val (Bool (false)))
      | _ -> raise (EvalError "Invalid binary operands")))
  (* RECURSIVE COMPUTATIONS SHOULD NOT BE ALLOWED IN LET *)
  | Let (id, d, b) -> 
    (match eval_s d (Env.empty ()) with
    | Env.Val (v_d) -> let v_b = Expr.subst id v_d b in eval_s v_b (Env.empty ())
    | Env.Closure (_, _) -> raise (EvalError "No closures in subst semantics"))
  | App (p, q) ->
    (match eval_s p (Env.empty ()) with
    | Env.Closure (_) -> raise (EvalError "No closures in subst semantics")
    | Env.Val (Fun (id, b)) ->
      (match eval_s q (Env.empty ()) with
      | Env.Closure (_) -> raise (EvalError "No closures in subst semantics")
      | Env.Val (v_q) -> 
        let v_b = Expr.subst id v_q b in
        eval_s v_b (Env.empty ()))
    | _ -> raise (EvalError "First expression in application must be a function"))
  | Conditional (if_exp, then_exp, else_exp) ->
    (match eval_s if_exp (Env.empty ()) with
    | Env.Val (Bool (b)) -> 
      (if b = true then eval_s then_exp (Env.empty ())
      else eval_s else_exp (Env.empty ()))
    | Env.Val (_) -> raise (EvalError "'if' expr of condition does not eval to bool")
    | Env.Closure (_) -> raise (EvalError "No closures in subst semantics"))
  | Letrec (id, d, b) -> 
    (match eval_s d (Env.empty ()) with
    | Env.Val (v_d) -> let v_b = Expr.subst id (Expr.subst id (Letrec (id, v_d, Var (id))) v_d) b in eval_s v_b (Env.empty ())
    | Env.Closure (_, _) -> raise (EvalError "No closures in subst semantics"))
  (* Not sure how to evaluate Raise and Unassigned in subst semantics, might be insignificant *)
  | Raise -> raise (EvalError "Not yet implemented: Raise")
  | Unassigned -> raise (EvalError "Not yet implemented: Unassigned")
;;

(* TEST EVAL_S *)
(* let eval_s_test () = *)

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
(* No closures in eval_d *)
let rec eval_d (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Bool (b) -> Env.Val (Bool (b))
  | Num (n) -> Env.Val (Num (n))
  | Var (x) -> Env.lookup env x
  | Fun (_, _) -> Env.Val (exp)
  | Unop (_, exp1) -> eval_d (Binop (Minus, Num (0), exp1)) env
  | Binop (op, exp1, exp2) ->
    (match eval_d exp1 env, eval_d exp2 env with
    | Env.Val (Bool (b1)), Env.Val (Bool (b2)) ->
      (match op with
      | Equals -> if b1 = b2 then Env.Val (Bool (true)) else Env.Val (Bool (false))
      | _ -> raise (EvalError "Booleans can't be evaluated with this operator"))
    | Env.Val (Num (num1)), Env.Val (Num (num2)) -> 
      (match op with
      | Plus -> Env.Val (Num (num1 + num2))
      | Minus -> Env.Val (Num (num1 - num2))
      | Times -> Env.Val (Num (num1 * num2))
      | Equals -> Env.Val (Bool (num1 = num2))
      | LessThan -> Env.Val (Bool (num1 < num2)))
    | _, _ -> raise (EvalError "Invalid binary operands"))
  (* RECURSIVE COMPUTATIONS SHOULD NOT BE ALLOWED IN LET? *)
  | Let (id, def_exp, body_exp) -> 
    (match eval_d def_exp env with
    | Env.Closure (_) -> raise (EvalError "No closures in dynamic semantics")
    | v_d -> let env' = Env.extend env id (ref (v_d)) in eval_d body_exp env')
  | App (exp_fun, exp_app) ->
    (match eval_d exp_fun env with
    | Env.Val (Fun (id, b)) -> 
      (let v_q = eval_d exp_app env in
       let env' = Env.extend env id (ref (v_q)) in
       eval_d b env')
    | Env.Closure (_) -> raise (EvalError "No closures in dynamic semantics")
    | _ -> raise (EvalError "P in P Q must be a function"))
  | Conditional (if_exp, then_exp, else_exp) ->
    (match eval_d if_exp env with
    | Env.Val (Bool (b)) -> 
      (if b = true then eval_d then_exp env
        else eval_d else_exp env)
    | Env.Val (_) -> raise (EvalError "'if' expr of condition does not eval to bool")
    | Env.Closure (_) -> raise (EvalError "No closures in dynamic semantics"))
  | Letrec (id, def_exp, body_exp) -> 
    (let env = Env.extend env id (ref (Env.Val (Unassigned))) in
    match eval_d def_exp env with
    | Env.Closure (_) -> raise (EvalError "No closures in dynamic semantics")
    | v_d -> let env' = Env.extend env id (ref (v_d)) in eval_d body_exp env')
  (* Not sure how to evaluate Raise in subst semantics, might be insignificant *)
  | Raise -> raise (EvalError "Not yet implemented: Raise")
  (* Believe that the implementation of Unassigned deals with Letrec *)
  | Unassigned -> raise (EvalError "Not yet implemented: Unassigned")
;;

(* TEST EVAL_D *)

(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)

(* Letrec on pg. 400 *)
let rec eval_l (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Bool (b) -> Env.Val (Bool (b))
  | Num (n) -> Env.Val (Num (n))
  | Var (x) -> 
    (match Env.lookup env x with
    | Env.Val (Unassigned) -> raise (EvalError "Can't eval Unassigned")
    | Env.Val (x_mapping) -> Env.Val (x_mapping)
    | Env.Closure (x_exp, x_env) -> Env.Closure (x_exp, x_env))
  | Fun (_, _) -> Env.close exp env
  | Unop (_, exp1) -> eval_l (Binop (Minus, Num (0), exp1)) env
  | Binop (op, exp1, exp2) ->
    (match eval_l exp1 env, eval_l exp2 env with
    | Env.Val (Bool (b1)), Env.Val (Bool (b2)) ->
      (match op with
      | Equals -> if b1 = b2 then Env.Val (Bool (true)) else Env.Val (Bool (false))
      | _ -> raise (EvalError "Booleans can't be evaluated with this operator"))
    | Env.Val (Num (num1)), Env.Val (Num (num2)) -> 
      (match op with
      | Plus -> Env.Val (Num (num1 + num2))
      | Minus -> Env.Val (Num (num1 - num2))
      | Times -> Env.Val (Num (num1 * num2))
      | Equals -> Env.Val (Bool (num1 = num2))
      | LessThan -> Env.Val (Bool (num1 < num2)))
    | _, _ -> raise (EvalError "Invalid binary operands"))
  (* RECURSIVE COMPUTATIONS SHOULD NOT BE ALLOWED IN LET? *)
  | Let (id, def_exp, body_exp) -> 
    (match eval_l def_exp env with
    | v_d -> let env' = Env.extend env id (ref (v_d)) in eval_l body_exp env')
  | App (exp_fun, exp_app) -> (* print_string ("arg env at time of app: " ^ Env.env_to_string env); print_newline (); *)
    (match eval_l exp_fun env with
    | Env.Closure ((Fun (id, b)), env_lex) -> print_string ("eval_l exp_fun env: " ^ Env.value_to_string (eval_l exp_fun env)); print_newline ();
      (* print_string ("env_lex: " ^ Env.env_to_string env_lex); print_newline (); *)
      (let v_q = eval_l exp_app env in
       let env' = Env.extend env_lex id (ref (v_q)) in
       (* print_string ("Env during application of f 4: " ^ Env.env_to_string env'); print_newline (); *)
       eval_l b env')
    | Env.Val (_) -> raise (EvalError "Function should eval to a closure in lexical semantics")
    | _ -> raise (EvalError "P in P Q must be a function"))
  | Conditional (if_exp, then_exp, else_exp) ->
    (match eval_l if_exp env with
    | Env.Val (Bool (b)) -> 
      (if b = true then eval_l then_exp env
        else eval_l else_exp env)
    | Env.Closure (_)
    | Env.Val (_) -> raise (EvalError "'if' expr of condition does not eval to bool"))
  | Letrec (id, def_exp, body_exp) -> (* print_string ("id: " ^ id); print_newline (); *)
    (let env' = Env.extend env id (ref (Env.Val (Unassigned))) in
    (* print_string ("Env' w/ Letrec id (f) mapping to unassigned: " ^ Env.env_to_string env'); print_newline (); *)
    (match eval_l def_exp env' with
    (* v_d should be a Env.Closure usually *)
    | v_d -> 
      (* print_string ("def_exp eval'd in env' (above): " ^ Env.value_to_string v_d); print_newline (); *)
      (let env'' = Env.extend env' id (ref (v_d)) in 
      (* print_string ("Env'' w/ Letrec id (f) mapping to above eval's def_exp: " ^ Env.env_to_string env''); print_newline (); *)
      (* print_string ("body_exp to eval in Env'': " ^ Expr.exp_to_abstract_string body_exp); print_newline (); *)
      (* print_string ("f evals to: "); eval_l (Var(id)) env''))) *)
      eval_l body_exp (env''))))
  (* Not sure how to evaluate Raise in subst semantics, might be insignificant *)
  | Raise -> raise (EvalError "Not yet implemented: Raise")
  (* Believe that the implementation of Unassigned deals with Letrec *)
  | Unassigned -> raise (EvalError "Not yet implemented: Unassigned")
;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_l ;;
